// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Player {
    id        String   @id @default(uuid())
    clerkId   String   @unique
    name      String
    email     String
    createdAt DateTime @default(now())

    PlayerGroup PlayerGroup[]
    player1Matches Match[] @relation("player1Matches")
    player2Matches Match[] @relation("player2Matches")
    player1PlayoffMatches PlayoffMatch[] @relation("player1PlayoffMatches")
    player2PlayoffMatches PlayoffMatch[] @relation("player2PlayoffMatches")
    matchesAsPlayer1 Match[] @relation("MatchPlayer1")
    matchesAsPlayer2 Match[] @relation("MatchPlayer2")
    wonMatches       Match[] @relation("MatchWinner")
}

model Group {
    id        String   @id @default(uuid())
    name      String
    createdAt DateTime @default(now())

    PlayerGroup PlayerGroup[]
    Match Match[]
    PlayoffMatch PlayoffMatch[]
}

model PlayerGroup {
    playerId String
    groupId  String
    player   Player   @relation(fields: [playerId], references: [id])
    group    Group    @relation(fields: [groupId], references: [id])

    @@id([playerId, groupId])
}

model Match {
    id        String   @id @default(uuid())
    player1Id String?
    player2Id String?
    groupId   String?
    round     Int
    scheduledTime DateTime?
    completed   Boolean @default(false)
    isPlayoff   Boolean @default(false)
    winnerId   String?
    matchOrderInRound Int?

    player1 Player? @relation("player1Matches", fields: [player1Id], references: [id])
    player2 Player? @relation("player2Matches", fields: [player2Id], references: [id])
    group   Group? @relation(fields: [groupId], references: [id])
    scores Score[]
    playOffplayer1    Player?  @relation("MatchPlayer1", fields: [player1Id], references: [id], map: "match_playoff_player1_fkey")
    playOffplayer2    Player?  @relation("MatchPlayer2", fields: [player2Id], references: [id], map: "match_playoff_player2_fkey")
    winner     Player?  @relation("MatchWinner", fields: [winnerId], references: [id])
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt @default(now())
}

model Score {
    id        String   @id @default(uuid())
    matchId String
    player1Score Int
    player2Score Int
    winnerId String?

    match Match @relation(fields: [matchId], references: [id])

    @@unique([matchId])
}

model PlayoffMatch {
    matchId        String   @id @default(uuid())
    player1Id String
    player2Id String
    groupId   String?
    round     Int
    scheduledTime DateTime?
    completed   Boolean @default(false)
    isPlayoff   Boolean @default(false)

    player1 Player @relation("player1PlayoffMatches", fields: [player1Id], references: [id])
    player2 Player @relation("player2PlayoffMatches", fields: [player2Id], references: [id])
    group   Group? @relation(fields: [groupId], references: [id])
    score1  Int?
    score2  Int?
}

